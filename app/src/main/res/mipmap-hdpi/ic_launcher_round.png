package com.zidoary.zidoaryapp.activities

import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.location.LocationManager
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.inputmethod.InputMethodManager
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.GravityCompat
import androidx.lifecycle.ViewModelProviders
import androidx.navigation.NavController
import androidx.navigation.findNavController
import androidx.navigation.ui.setupWithNavController
import com.google.android.gms.common.ConnectionResult
import com.google.android.gms.common.GoogleApiAvailability
import com.google.firebase.auth.FirebaseAuth
import com.xenderx.googlemapssdktest.utils.Constants
import com.zidoary.zidoaryapp.R
import com.zidoary.zidoaryapp.utils.IFragmentCallback
import com.zidoary.zidoaryapp.viewmodels.MapPermissionsViewModel
import kotlinx.android.synthetic.main.activity_main.*
import kotlinx.android.synthetic.main.activity_main_nav.*

class MainNavActivity :
    AppCompatActivity(), IFragmentCallback{

//    private lateinit var appBarConfiguration: AppBarConfiguration

    companion object {
        private const val TAG = "MainNavActivity"
    }

    // variables
    private var mLocationPermissionGranted: Boolean = false
    private lateinit var mNavController: NavController
    private lateinit var mMapPermissionsViewModel: MapPermissionsViewModel

    // LifeCycle Methods
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main_nav)

        mMapPermissionsViewModel = ViewModelProviders.of(this).get(MapPermissionsViewModel::class.java)

        val drawerLayout = drawer_layout_nav_main
        val navView = nav_view_main
        
        mNavController = findNavController(R.id.nav_host_fragment)

//        appBarConfiguration = AppBarConfiguration(
//            setOf(
//                R.id.home2Fragment, R.id.accountFragment, R.id.chatFragment,
//                R.id.notificationsFragment, R.id.settingsFragment
//            ), drawerLayout
//        )
//
//        setupActionBarWithNavController(navController, appBarConfiguration)
        navView.setupWithNavController(mNavController)
    }

    override fun onResume() {
        super.onResume()

        if (checkMapServices()) {
            if (!mLocationPermissionGranted) {
                getLocationPermission()
            } else {
//                mNavController.navigate(R.id.drawer_home)
                mMapPermissionsViewModel.setIsMapPermissionsGranted(true)
//                loadFragment(HomeFragment())
            }
        }
    }

    // Verifying Permissions
    private fun checkMapServices(): Boolean {
        if (checkGoogleServices()) {
            if (isGPSEnabled()) {
                return true
            }
        }
        return false
    }

    private fun checkGoogleServices(): Boolean {
        Log.d(TAG, "checkGoogleServices: checking google services version")

        val available = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this)

        when {
            available == ConnectionResult.SUCCESS -> {
                //everything is fine and the user can make map requests
                Log.d(TAG, "checkGoogleServices: Google Play Services is working")
                return true
            }
            GoogleApiAvailability.getInstance().isUserResolvableError(available) -> {
                //an error occurred but we can resolve it
                Log.d(TAG, "checkGoogleServices: an error occurred")
                val dialog = GoogleApiAvailability.getInstance()
                    .getErrorDialog(this@MainNavActivity, available,
                        Constants.ERROR_DIALOG_REQUEST
                    )
                dialog.show()
            }
            else -> Toast.makeText(this, "You can't make map requests", Toast.LENGTH_SHORT).show()
        }
        return false
    }

    private fun isGPSEnabled(): Boolean {
        val manager = getSystemService(Context.LOCATION_SERVICE) as LocationManager

        if (!manager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            showGPSDisabledError()
            return false
        }
        return true
    }

    private fun showGPSDisabledError() {
        val builder = AlertDialog.Builder(this)
        builder.setMessage("This application requires GPS to work properly, do you want to enable it?")
            .setCancelable(false